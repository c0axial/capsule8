// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/telemetry_event.proto

package capsule8_api_v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContainerEventType int32

const (
	ContainerEventType_CONTAINER_EVENT_TYPE_UNKNOWN   ContainerEventType = 0
	ContainerEventType_CONTAINER_EVENT_TYPE_CREATED   ContainerEventType = 1
	ContainerEventType_CONTAINER_EVENT_TYPE_RUNNING   ContainerEventType = 2
	ContainerEventType_CONTAINER_EVENT_TYPE_EXITED    ContainerEventType = 3
	ContainerEventType_CONTAINER_EVENT_TYPE_DESTROYED ContainerEventType = 4
)

var ContainerEventType_name = map[int32]string{
	0: "CONTAINER_EVENT_TYPE_UNKNOWN",
	1: "CONTAINER_EVENT_TYPE_CREATED",
	2: "CONTAINER_EVENT_TYPE_RUNNING",
	3: "CONTAINER_EVENT_TYPE_EXITED",
	4: "CONTAINER_EVENT_TYPE_DESTROYED",
}
var ContainerEventType_value = map[string]int32{
	"CONTAINER_EVENT_TYPE_UNKNOWN":   0,
	"CONTAINER_EVENT_TYPE_CREATED":   1,
	"CONTAINER_EVENT_TYPE_RUNNING":   2,
	"CONTAINER_EVENT_TYPE_EXITED":    3,
	"CONTAINER_EVENT_TYPE_DESTROYED": 4,
}

func (x ContainerEventType) String() string {
	return proto.EnumName(ContainerEventType_name, int32(x))
}
func (ContainerEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Possible ProcessEvent types
type ProcessEventType int32

const (
	// The type of event is unknown
	ProcessEventType_PROCESS_EVENT_TYPE_UNKNOWN ProcessEventType = 0
	// The event is a process fork event
	ProcessEventType_PROCESS_EVENT_TYPE_FORK ProcessEventType = 1
	// The event is a process exec event
	ProcessEventType_PROCESS_EVENT_TYPE_EXEC ProcessEventType = 2
	// The event is a process exit event
	ProcessEventType_PROCESS_EVENT_TYPE_EXIT ProcessEventType = 3
)

var ProcessEventType_name = map[int32]string{
	0: "PROCESS_EVENT_TYPE_UNKNOWN",
	1: "PROCESS_EVENT_TYPE_FORK",
	2: "PROCESS_EVENT_TYPE_EXEC",
	3: "PROCESS_EVENT_TYPE_EXIT",
}
var ProcessEventType_value = map[string]int32{
	"PROCESS_EVENT_TYPE_UNKNOWN": 0,
	"PROCESS_EVENT_TYPE_FORK":    1,
	"PROCESS_EVENT_TYPE_EXEC":    2,
	"PROCESS_EVENT_TYPE_EXIT":    3,
}

func (x ProcessEventType) String() string {
	return proto.EnumName(ProcessEventType_name, int32(x))
}
func (ProcessEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Possible SyscallEvent types
type SyscallEventType int32

const (
	// The type of event is unknown
	SyscallEventType_SYSCALL_EVENT_TYPE_UNKNOWN SyscallEventType = 0
	// The event is a syscall enter event
	SyscallEventType_SYSCALL_EVENT_TYPE_ENTER SyscallEventType = 1
	// The event is a syscall exit event
	SyscallEventType_SYSCALL_EVENT_TYPE_EXIT SyscallEventType = 2
)

var SyscallEventType_name = map[int32]string{
	0: "SYSCALL_EVENT_TYPE_UNKNOWN",
	1: "SYSCALL_EVENT_TYPE_ENTER",
	2: "SYSCALL_EVENT_TYPE_EXIT",
}
var SyscallEventType_value = map[string]int32{
	"SYSCALL_EVENT_TYPE_UNKNOWN": 0,
	"SYSCALL_EVENT_TYPE_ENTER":   1,
	"SYSCALL_EVENT_TYPE_EXIT":    2,
}

func (x SyscallEventType) String() string {
	return proto.EnumName(SyscallEventType_name, int32(x))
}
func (SyscallEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// Possible FileEvent types
type FileEventType int32

const (
	// The type of event is unknown
	FileEventType_FILE_EVENT_TYPE_UNKNOWN FileEventType = 0
	// The event is a file open event
	FileEventType_FILE_EVENT_TYPE_OPEN FileEventType = 1
)

var FileEventType_name = map[int32]string{
	0: "FILE_EVENT_TYPE_UNKNOWN",
	1: "FILE_EVENT_TYPE_OPEN",
}
var FileEventType_value = map[string]int32{
	"FILE_EVENT_TYPE_UNKNOWN": 0,
	"FILE_EVENT_TYPE_OPEN":    1,
}

func (x FileEventType) String() string {
	return proto.EnumName(FileEventType_name, int32(x))
}
func (FileEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// Possible KernelFunctionCallEvent types
type KernelFunctionCallEventType int32

const (
	// The type of event is unknown
	KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN KernelFunctionCallEventType = 0
	// The event is a kernel function being entered.
	KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER KernelFunctionCallEventType = 1
	// The event is a kernel function being exited.
	KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT KernelFunctionCallEventType = 2
)

var KernelFunctionCallEventType_name = map[int32]string{
	0: "KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN",
	1: "KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER",
	2: "KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT",
}
var KernelFunctionCallEventType_value = map[string]int32{
	"KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN": 0,
	"KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER":   1,
	"KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT":    2,
}

func (x KernelFunctionCallEventType) String() string {
	return proto.EnumName(KernelFunctionCallEventType_name, int32(x))
}
func (KernelFunctionCallEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

// Possible network event types
type NetworkEventType int32

const (
	// The type of event is unknown
	NetworkEventType_NETWORK_EVENT_TYPE_UNKNOWN NetworkEventType = 0
	// The event is an attempt to connect to an address
	NetworkEventType_NETWORK_EVENT_TYPE_CONNECT_ATTEMPT NetworkEventType = 1
	// The event is the result of an attempt to connect to an address
	NetworkEventType_NETWORK_EVENT_TYPE_CONNECT_RESULT NetworkEventType = 2
	// The event is an attempt to bind to a local address
	NetworkEventType_NETWORK_EVENT_TYPE_BIND_ATTEMPT NetworkEventType = 3
	// The event is the result of an attempt to bind to a local address
	NetworkEventType_NETWORK_EVENT_TYPE_BIND_RESULT NetworkEventType = 4
	// The event is an attempt to listen for connections
	NetworkEventType_NETWORK_EVENT_TYPE_LISTEN_ATTEMPT NetworkEventType = 5
	// The event is the result of an attempt to listen for connections
	NetworkEventType_NETWORK_EVENT_TYPE_LISTEN_RESULT NetworkEventType = 6
	// The event is an attempt to accept an incoming connection
	NetworkEventType_NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT NetworkEventType = 7
	// The event is the result of an attempt to accept an incoming
	// connection
	NetworkEventType_NETWORK_EVENT_TYPE_ACCEPT_RESULT NetworkEventType = 8
	// The event is an attempt to send data to a specific address
	NetworkEventType_NETWORK_EVENT_TYPE_SENDTO_ATTEMPT NetworkEventType = 9
	// The event is the result of an attempt to send data to a specific
	// address
	NetworkEventType_NETWORK_EVENT_TYPE_SENDTO_RESULT NetworkEventType = 10
	// The event is an attempt to receive data from a specific address
	NetworkEventType_NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT NetworkEventType = 11
	// The event is the result of an attempt to receive data from a
	// specific address
	NetworkEventType_NETWORK_EVENT_TYPE_RECVFROM_RESULT NetworkEventType = 12
)

var NetworkEventType_name = map[int32]string{
	0:  "NETWORK_EVENT_TYPE_UNKNOWN",
	1:  "NETWORK_EVENT_TYPE_CONNECT_ATTEMPT",
	2:  "NETWORK_EVENT_TYPE_CONNECT_RESULT",
	3:  "NETWORK_EVENT_TYPE_BIND_ATTEMPT",
	4:  "NETWORK_EVENT_TYPE_BIND_RESULT",
	5:  "NETWORK_EVENT_TYPE_LISTEN_ATTEMPT",
	6:  "NETWORK_EVENT_TYPE_LISTEN_RESULT",
	7:  "NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT",
	8:  "NETWORK_EVENT_TYPE_ACCEPT_RESULT",
	9:  "NETWORK_EVENT_TYPE_SENDTO_ATTEMPT",
	10: "NETWORK_EVENT_TYPE_SENDTO_RESULT",
	11: "NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT",
	12: "NETWORK_EVENT_TYPE_RECVFROM_RESULT",
}
var NetworkEventType_value = map[string]int32{
	"NETWORK_EVENT_TYPE_UNKNOWN":          0,
	"NETWORK_EVENT_TYPE_CONNECT_ATTEMPT":  1,
	"NETWORK_EVENT_TYPE_CONNECT_RESULT":   2,
	"NETWORK_EVENT_TYPE_BIND_ATTEMPT":     3,
	"NETWORK_EVENT_TYPE_BIND_RESULT":      4,
	"NETWORK_EVENT_TYPE_LISTEN_ATTEMPT":   5,
	"NETWORK_EVENT_TYPE_LISTEN_RESULT":    6,
	"NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT":   7,
	"NETWORK_EVENT_TYPE_ACCEPT_RESULT":    8,
	"NETWORK_EVENT_TYPE_SENDTO_ATTEMPT":   9,
	"NETWORK_EVENT_TYPE_SENDTO_RESULT":    10,
	"NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT": 11,
	"NETWORK_EVENT_TYPE_RECVFROM_RESULT":  12,
}

func (x NetworkEventType) String() string {
	return proto.EnumName(NetworkEventType_name, int32(x))
}
func (NetworkEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// Possible field types
type KernelFunctionCallEvent_FieldType int32

const (
	// The field type is unknown
	KernelFunctionCallEvent_UNKNOWN KernelFunctionCallEvent_FieldType = 0
	// The field type is an array of bytes
	KernelFunctionCallEvent_BYTES KernelFunctionCallEvent_FieldType = 1
	// The field type is a string
	KernelFunctionCallEvent_STRING KernelFunctionCallEvent_FieldType = 2
	// The field type is a signed 8-bit integer
	KernelFunctionCallEvent_SINT8 KernelFunctionCallEvent_FieldType = 3
	// The field type is a signed 16-bit integer
	KernelFunctionCallEvent_SINT16 KernelFunctionCallEvent_FieldType = 4
	// The field type is a signed 32-bit integer
	KernelFunctionCallEvent_SINT32 KernelFunctionCallEvent_FieldType = 5
	// The field type is a signed 64-bit integer
	KernelFunctionCallEvent_SINT64 KernelFunctionCallEvent_FieldType = 6
	// The field type is an unsigned 8-bit integer
	KernelFunctionCallEvent_UINT8 KernelFunctionCallEvent_FieldType = 7
	// The field type is an unsigned 16-bit integer
	KernelFunctionCallEvent_UINT16 KernelFunctionCallEvent_FieldType = 8
	// The field type is an unsigned 32-bit integer
	KernelFunctionCallEvent_UINT32 KernelFunctionCallEvent_FieldType = 9
	// The field type is an unsigned 64-bit integer
	KernelFunctionCallEvent_UINT64 KernelFunctionCallEvent_FieldType = 10
)

var KernelFunctionCallEvent_FieldType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "BYTES",
	2:  "STRING",
	3:  "SINT8",
	4:  "SINT16",
	5:  "SINT32",
	6:  "SINT64",
	7:  "UINT8",
	8:  "UINT16",
	9:  "UINT32",
	10: "UINT64",
}
var KernelFunctionCallEvent_FieldType_value = map[string]int32{
	"UNKNOWN": 0,
	"BYTES":   1,
	"STRING":  2,
	"SINT8":   3,
	"SINT16":  4,
	"SINT32":  5,
	"SINT64":  6,
	"UINT8":   7,
	"UINT16":  8,
	"UINT32":  9,
	"UINT64":  10,
}

func (x KernelFunctionCallEvent_FieldType) String() string {
	return proto.EnumName(KernelFunctionCallEvent_FieldType_name, int32(x))
}
func (KernelFunctionCallEvent_FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{8, 0}
}

// An event observed by the Sensor.
type TelemetryEvent struct {
	// Unique identifier for the event
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Unique process identifier associated with the event to differentiate
	// reused values of the pid below.
	ProcessId string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	// Unix pid of the process associated with the event
	ProcessPid int32 `protobuf:"varint,3,opt,name=process_pid,json=processPid" json:"process_pid,omitempty"`
	// Container identifier associated with the event
	ContainerId string `protobuf:"bytes,4,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	// Sensor identifier of the sensor instance that observed the event
	SensorId string `protobuf:"bytes,5,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
	// Sequence number from some unspecified starting point unique
	// to the Sensor. Provides a strict linear ordering of events with
	// the same sensor_id where no two events can have the same sequence
	// number. If it is present, it must be greater than zero. A zero
	// value indicates that there is no sequence number associated with
	// the event.
	SensorSequenceNumber uint64 `protobuf:"varint,6,opt,name=sensor_sequence_number,json=sensorSequenceNumber" json:"sensor_sequence_number,omitempty"`
	// Monotonic nanosecond timestamp from some unspecified starting
	// point unique to the Sensor. Can only be used to calculate time
	// intervals between events with the same sensor_id.
	SensorMonotimeNanos int64 `protobuf:"varint,7,opt,name=sensor_monotime_nanos,json=sensorMonotimeNanos" json:"sensor_monotime_nanos,omitempty"`
	// Process Lineage contains one process context for each process in the
	// hierarchy, starting with the current process, up to the root of the
	// process namespace.
	ProcessLineage []*Process `protobuf:"bytes,8,rep,name=process_lineage,json=processLineage" json:"process_lineage,omitempty"`
	// Name of container associated with the event
	ContainerName string `protobuf:"bytes,30,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	// Unique identifier of the container image
	ImageId string `protobuf:"bytes,31,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	//
	// Name of the container image (i.e. "busybox" or
	// "gcr.io/google_containers/nginx-ingress-controller")
	//
	ImageName string `protobuf:"bytes,32,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*TelemetryEvent_Syscall
	//	*TelemetryEvent_Process
	//	*TelemetryEvent_File
	//	*TelemetryEvent_KernelCall
	//	*TelemetryEvent_Network
	//	*TelemetryEvent_Container
	//	*TelemetryEvent_Chargen
	//	*TelemetryEvent_Ticker
	Event isTelemetryEvent_Event `protobuf_oneof:"event"`
	// CPU on which the event occurred
	Cpu int32 `protobuf:"varint,201,opt,name=cpu" json:"cpu,omitempty"`
}

func (m *TelemetryEvent) Reset()                    { *m = TelemetryEvent{} }
func (m *TelemetryEvent) String() string            { return proto.CompactTextString(m) }
func (*TelemetryEvent) ProtoMessage()               {}
func (*TelemetryEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isTelemetryEvent_Event interface {
	isTelemetryEvent_Event()
}

type TelemetryEvent_Syscall struct {
	Syscall *SyscallEvent `protobuf:"bytes,10,opt,name=syscall,oneof"`
}
type TelemetryEvent_Process struct {
	Process *ProcessEvent `protobuf:"bytes,11,opt,name=process,oneof"`
}
type TelemetryEvent_File struct {
	File *FileEvent `protobuf:"bytes,12,opt,name=file,oneof"`
}
type TelemetryEvent_KernelCall struct {
	KernelCall *KernelFunctionCallEvent `protobuf:"bytes,13,opt,name=kernel_call,json=kernelCall,oneof"`
}
type TelemetryEvent_Network struct {
	Network *NetworkEvent `protobuf:"bytes,14,opt,name=network,oneof"`
}
type TelemetryEvent_Container struct {
	Container *ContainerEvent `protobuf:"bytes,20,opt,name=container,oneof"`
}
type TelemetryEvent_Chargen struct {
	Chargen *ChargenEvent `protobuf:"bytes,100,opt,name=chargen,oneof"`
}
type TelemetryEvent_Ticker struct {
	Ticker *TickerEvent `protobuf:"bytes,101,opt,name=ticker,oneof"`
}

func (*TelemetryEvent_Syscall) isTelemetryEvent_Event()    {}
func (*TelemetryEvent_Process) isTelemetryEvent_Event()    {}
func (*TelemetryEvent_File) isTelemetryEvent_Event()       {}
func (*TelemetryEvent_KernelCall) isTelemetryEvent_Event() {}
func (*TelemetryEvent_Network) isTelemetryEvent_Event()    {}
func (*TelemetryEvent_Container) isTelemetryEvent_Event()  {}
func (*TelemetryEvent_Chargen) isTelemetryEvent_Event()    {}
func (*TelemetryEvent_Ticker) isTelemetryEvent_Event()     {}

func (m *TelemetryEvent) GetEvent() isTelemetryEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *TelemetryEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TelemetryEvent) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *TelemetryEvent) GetProcessPid() int32 {
	if m != nil {
		return m.ProcessPid
	}
	return 0
}

func (m *TelemetryEvent) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *TelemetryEvent) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *TelemetryEvent) GetSensorSequenceNumber() uint64 {
	if m != nil {
		return m.SensorSequenceNumber
	}
	return 0
}

func (m *TelemetryEvent) GetSensorMonotimeNanos() int64 {
	if m != nil {
		return m.SensorMonotimeNanos
	}
	return 0
}

func (m *TelemetryEvent) GetProcessLineage() []*Process {
	if m != nil {
		return m.ProcessLineage
	}
	return nil
}

func (m *TelemetryEvent) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *TelemetryEvent) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *TelemetryEvent) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *TelemetryEvent) GetSyscall() *SyscallEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_Syscall); ok {
		return x.Syscall
	}
	return nil
}

func (m *TelemetryEvent) GetProcess() *ProcessEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_Process); ok {
		return x.Process
	}
	return nil
}

func (m *TelemetryEvent) GetFile() *FileEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_File); ok {
		return x.File
	}
	return nil
}

func (m *TelemetryEvent) GetKernelCall() *KernelFunctionCallEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_KernelCall); ok {
		return x.KernelCall
	}
	return nil
}

func (m *TelemetryEvent) GetNetwork() *NetworkEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_Network); ok {
		return x.Network
	}
	return nil
}

func (m *TelemetryEvent) GetContainer() *ContainerEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_Container); ok {
		return x.Container
	}
	return nil
}

func (m *TelemetryEvent) GetChargen() *ChargenEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_Chargen); ok {
		return x.Chargen
	}
	return nil
}

func (m *TelemetryEvent) GetTicker() *TickerEvent {
	if x, ok := m.GetEvent().(*TelemetryEvent_Ticker); ok {
		return x.Ticker
	}
	return nil
}

func (m *TelemetryEvent) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TelemetryEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TelemetryEvent_OneofMarshaler, _TelemetryEvent_OneofUnmarshaler, _TelemetryEvent_OneofSizer, []interface{}{
		(*TelemetryEvent_Syscall)(nil),
		(*TelemetryEvent_Process)(nil),
		(*TelemetryEvent_File)(nil),
		(*TelemetryEvent_KernelCall)(nil),
		(*TelemetryEvent_Network)(nil),
		(*TelemetryEvent_Container)(nil),
		(*TelemetryEvent_Chargen)(nil),
		(*TelemetryEvent_Ticker)(nil),
	}
}

func _TelemetryEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TelemetryEvent)
	// event
	switch x := m.Event.(type) {
	case *TelemetryEvent_Syscall:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Syscall); err != nil {
			return err
		}
	case *TelemetryEvent_Process:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Process); err != nil {
			return err
		}
	case *TelemetryEvent_File:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case *TelemetryEvent_KernelCall:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KernelCall); err != nil {
			return err
		}
	case *TelemetryEvent_Network:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Network); err != nil {
			return err
		}
	case *TelemetryEvent_Container:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Container); err != nil {
			return err
		}
	case *TelemetryEvent_Chargen:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chargen); err != nil {
			return err
		}
	case *TelemetryEvent_Ticker:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ticker); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TelemetryEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _TelemetryEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TelemetryEvent)
	switch tag {
	case 10: // event.syscall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SyscallEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_Syscall{msg}
		return true, err
	case 11: // event.process
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcessEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_Process{msg}
		return true, err
	case 12: // event.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_File{msg}
		return true, err
	case 13: // event.kernel_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KernelFunctionCallEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_KernelCall{msg}
		return true, err
	case 14: // event.network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NetworkEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_Network{msg}
		return true, err
	case 20: // event.container
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContainerEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_Container{msg}
		return true, err
	case 100: // event.chargen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChargenEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_Chargen{msg}
		return true, err
	case 101: // event.ticker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TickerEvent)
		err := b.DecodeMessage(msg)
		m.Event = &TelemetryEvent_Ticker{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TelemetryEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TelemetryEvent)
	// event
	switch x := m.Event.(type) {
	case *TelemetryEvent_Syscall:
		s := proto.Size(x.Syscall)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_Process:
		s := proto.Size(x.Process)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_File:
		s := proto.Size(x.File)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_KernelCall:
		s := proto.Size(x.KernelCall)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_Network:
		s := proto.Size(x.Network)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_Container:
		s := proto.Size(x.Container)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_Chargen:
		s := proto.Size(x.Chargen)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TelemetryEvent_Ticker:
		s := proto.Size(x.Ticker)
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ChargenEvent struct {
	// Index of the first character in this Event in relation to all of
	// the characters that have been generated in this stream.
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// The next one or more characters in the autogenerated stream
	Characters string `protobuf:"bytes,2,opt,name=characters" json:"characters,omitempty"`
}

func (m *ChargenEvent) Reset()                    { *m = ChargenEvent{} }
func (m *ChargenEvent) String() string            { return proto.CompactTextString(m) }
func (*ChargenEvent) ProtoMessage()               {}
func (*ChargenEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ChargenEvent) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ChargenEvent) GetCharacters() string {
	if m != nil {
		return m.Characters
	}
	return ""
}

type TickerEvent struct {
	// The number of seconds elapsed since January 1, 1970 UTC.
	//
	// https://golang.org/pkg/time/#Time.Unix
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// The number of nanoseconds elapsed since January 1, 1970 UTC
	//
	// https://golang.org/pkg/time/#Time.UnixNano
	Nanoseconds int64 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *TickerEvent) Reset()                    { *m = TickerEvent{} }
func (m *TickerEvent) String() string            { return proto.CompactTextString(m) }
func (*TickerEvent) ProtoMessage()               {}
func (*TickerEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *TickerEvent) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *TickerEvent) GetNanoseconds() int64 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// ContainerEvent describes a Docker container or Rkt App lifecycle event
type ContainerEvent struct {
	Type ContainerEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.ContainerEventType" json:"type,omitempty"`
	Name string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Unique identifier of the container image
	ImageId string `protobuf:"bytes,10,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	//
	// Name of the container image (i.e. "busybox" or
	// "gcr.io/google_containers/nginx-ingress-controller")
	//
	ImageName string `protobuf:"bytes,11,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
	// Host process identifier of the container's init process.
	HostPid int32 `protobuf:"zigzag32,20,opt,name=host_pid,json=hostPid" json:"host_pid,omitempty"`
	// Optional, only included on CONTAINER_EVENT_TYPE_EXIT events
	ExitCode int32 `protobuf:"zigzag32,30,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	// The exit status will typically one of the values defined in
	// stdlib.h like EXIT_SUCCESS, EXIT_FAILURE, or EXIT_USAGE.
	ExitStatus uint32 `protobuf:"varint,31,opt,name=exit_status,json=exitStatus" json:"exit_status,omitempty"`
	// If non-zero, this is the signal number that the process
	// was terminated with.
	ExitSignal uint32 `protobuf:"varint,32,opt,name=exit_signal,json=exitSignal" json:"exit_signal,omitempty"`
	// If true, indicates that the process dumped a core when
	// it terminated.
	ExitCoreDumped bool `protobuf:"varint,33,opt,name=exit_core_dumped,json=exitCoreDumped" json:"exit_core_dumped,omitempty"`
	// Docker container configuration file
	DockerConfigJson string `protobuf:"bytes,100,opt,name=docker_config_json,json=dockerConfigJson" json:"docker_config_json,omitempty"`
	// OCI container configuration file
	OciConfigJson string `protobuf:"bytes,101,opt,name=oci_config_json,json=ociConfigJson" json:"oci_config_json,omitempty"`
}

func (m *ContainerEvent) Reset()                    { *m = ContainerEvent{} }
func (m *ContainerEvent) String() string            { return proto.CompactTextString(m) }
func (*ContainerEvent) ProtoMessage()               {}
func (*ContainerEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ContainerEvent) GetType() ContainerEventType {
	if m != nil {
		return m.Type
	}
	return ContainerEventType_CONTAINER_EVENT_TYPE_UNKNOWN
}

func (m *ContainerEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerEvent) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ContainerEvent) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *ContainerEvent) GetHostPid() int32 {
	if m != nil {
		return m.HostPid
	}
	return 0
}

func (m *ContainerEvent) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ContainerEvent) GetExitStatus() uint32 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func (m *ContainerEvent) GetExitSignal() uint32 {
	if m != nil {
		return m.ExitSignal
	}
	return 0
}

func (m *ContainerEvent) GetExitCoreDumped() bool {
	if m != nil {
		return m.ExitCoreDumped
	}
	return false
}

func (m *ContainerEvent) GetDockerConfigJson() string {
	if m != nil {
		return m.DockerConfigJson
	}
	return ""
}

func (m *ContainerEvent) GetOciConfigJson() string {
	if m != nil {
		return m.OciConfigJson
	}
	return ""
}

// ProcessEvent describes an event that occurred related to processes starting
// and exiting as detected by the Sensor.
type ProcessEvent struct {
	// The type of event described by this ProcessEvent message
	Type ProcessEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.ProcessEventType" json:"type,omitempty"`
	// Present when the event is a fork event. This is the PID of the
	// new child process.
	ForkChildPid int32 `protobuf:"zigzag32,10,opt,name=fork_child_pid,json=forkChildPid" json:"fork_child_pid,omitempty"`
	// Present when the event is a fork event. This is the Sensor's process
	// ID of the new child process.
	ForkChildId string `protobuf:"bytes,11,opt,name=fork_child_id,json=forkChildId" json:"fork_child_id,omitempty"`
	// Present when the event is an exec event. This is the filename of the
	// executable that was executed.
	ExecFilename string `protobuf:"bytes,20,opt,name=exec_filename,json=execFilename" json:"exec_filename,omitempty"`
	// Present when the event is an exec event. Repeated for each argument
	// passed to the executable on the command-line.
	ExecCommandLine []string `protobuf:"bytes,21,rep,name=exec_command_line,json=execCommandLine" json:"exec_command_line,omitempty"`
	// Present when the event is an exit event. This is the exit code that
	// the process exited with.
	ExitCode int32 `protobuf:"zigzag32,30,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	// Present when the event is an exit event. This will typically be one9
	// of the values defined in stdlib.h like EXIT_SUCCESS, EXIT_FAILURE,
	// or EXIT_USAGE.
	ExitStatus uint32 `protobuf:"varint,31,opt,name=exit_status,json=exitStatus" json:"exit_status,omitempty"`
	// Present when the event is an exit event. If non-zero, this is the
	// signal number that the process was terminated with.
	ExitSignal uint32 `protobuf:"varint,32,opt,name=exit_signal,json=exitSignal" json:"exit_signal,omitempty"`
	// Present when the event is an exit event. If true, indicates that the
	// process dumped a core when it terminated.
	ExitCoreDumped bool `protobuf:"varint,33,opt,name=exit_core_dumped,json=exitCoreDumped" json:"exit_core_dumped,omitempty"`
}

func (m *ProcessEvent) Reset()                    { *m = ProcessEvent{} }
func (m *ProcessEvent) String() string            { return proto.CompactTextString(m) }
func (*ProcessEvent) ProtoMessage()               {}
func (*ProcessEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ProcessEvent) GetType() ProcessEventType {
	if m != nil {
		return m.Type
	}
	return ProcessEventType_PROCESS_EVENT_TYPE_UNKNOWN
}

func (m *ProcessEvent) GetForkChildPid() int32 {
	if m != nil {
		return m.ForkChildPid
	}
	return 0
}

func (m *ProcessEvent) GetForkChildId() string {
	if m != nil {
		return m.ForkChildId
	}
	return ""
}

func (m *ProcessEvent) GetExecFilename() string {
	if m != nil {
		return m.ExecFilename
	}
	return ""
}

func (m *ProcessEvent) GetExecCommandLine() []string {
	if m != nil {
		return m.ExecCommandLine
	}
	return nil
}

func (m *ProcessEvent) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ProcessEvent) GetExitStatus() uint32 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func (m *ProcessEvent) GetExitSignal() uint32 {
	if m != nil {
		return m.ExitSignal
	}
	return 0
}

func (m *ProcessEvent) GetExitCoreDumped() bool {
	if m != nil {
		return m.ExitCoreDumped
	}
	return false
}

// SyscallEvent describes an event that occurred related to system calls being
// made or returning as detected by the Sensor.
type SyscallEvent struct {
	// The type of event described by this SyscallEvent message
	Type SyscallEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.SyscallEventType" json:"type,omitempty"`
	// The syscall number for either enter or exit events.
	Id int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// Present when the event is an enter event. This is the first
	// argument passed to the system call.
	Arg0 uint64 `protobuf:"varint,10,opt,name=arg0" json:"arg0,omitempty"`
	// Present when the event is an enter event. This is the second
	// argument passed to the system call.
	Arg1 uint64 `protobuf:"varint,11,opt,name=arg1" json:"arg1,omitempty"`
	// Present when the event is an enter event. This is the third
	// argument passed to the system call.
	Arg2 uint64 `protobuf:"varint,12,opt,name=arg2" json:"arg2,omitempty"`
	// Present when the event is an enter event. This is the fourth
	// argument passed to the system call.
	Arg3 uint64 `protobuf:"varint,13,opt,name=arg3" json:"arg3,omitempty"`
	// Present when the event is an enter event. This is the fifth
	// argument passed to the system call.
	Arg4 uint64 `protobuf:"varint,14,opt,name=arg4" json:"arg4,omitempty"`
	// Present when the event is an enter event. This is the sixth
	// argument passed to the system call.
	Arg5 uint64 `protobuf:"varint,15,opt,name=arg5" json:"arg5,omitempty"`
	// Present when the event is an exit event. This is the value that was
	// returned from the system call.
	Ret int64 `protobuf:"varint,20,opt,name=ret" json:"ret,omitempty"`
}

func (m *SyscallEvent) Reset()                    { *m = SyscallEvent{} }
func (m *SyscallEvent) String() string            { return proto.CompactTextString(m) }
func (*SyscallEvent) ProtoMessage()               {}
func (*SyscallEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SyscallEvent) GetType() SyscallEventType {
	if m != nil {
		return m.Type
	}
	return SyscallEventType_SYSCALL_EVENT_TYPE_UNKNOWN
}

func (m *SyscallEvent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyscallEvent) GetArg0() uint64 {
	if m != nil {
		return m.Arg0
	}
	return 0
}

func (m *SyscallEvent) GetArg1() uint64 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *SyscallEvent) GetArg2() uint64 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

func (m *SyscallEvent) GetArg3() uint64 {
	if m != nil {
		return m.Arg3
	}
	return 0
}

func (m *SyscallEvent) GetArg4() uint64 {
	if m != nil {
		return m.Arg4
	}
	return 0
}

func (m *SyscallEvent) GetArg5() uint64 {
	if m != nil {
		return m.Arg5
	}
	return 0
}

func (m *SyscallEvent) GetRet() int64 {
	if m != nil {
		return m.Ret
	}
	return 0
}

// FileEvent describes an event that occurred related to file operations
// occurring as detected by the Sensor.
type FileEvent struct {
	// The type of event described by this FileEvent message
	Type FileEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.FileEventType" json:"type,omitempty"`
	// Present when the event is a file open event. This is the filename of
	// the file being opened.
	Filename string `protobuf:"bytes,10,opt,name=filename" json:"filename,omitempty"`
	// Present when the event is a file open event. This is the set of
	// flags with which the file was opened (e.g., O_RDONLY, O_NONBLOCK,
	// etc.).
	OpenFlags int32 `protobuf:"zigzag32,11,opt,name=open_flags,json=openFlags" json:"open_flags,omitempty"`
	// Present when the event is a file open event. This is the set of file
	// permissions used in a creat(2) system call.
	OpenMode int32 `protobuf:"zigzag32,12,opt,name=open_mode,json=openMode" json:"open_mode,omitempty"`
}

func (m *FileEvent) Reset()                    { *m = FileEvent{} }
func (m *FileEvent) String() string            { return proto.CompactTextString(m) }
func (*FileEvent) ProtoMessage()               {}
func (*FileEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *FileEvent) GetType() FileEventType {
	if m != nil {
		return m.Type
	}
	return FileEventType_FILE_EVENT_TYPE_UNKNOWN
}

func (m *FileEvent) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileEvent) GetOpenFlags() int32 {
	if m != nil {
		return m.OpenFlags
	}
	return 0
}

func (m *FileEvent) GetOpenMode() int32 {
	if m != nil {
		return m.OpenMode
	}
	return 0
}

type Process struct {
	Pid     int32  `protobuf:"zigzag32,1,opt,name=pid" json:"pid,omitempty"`
	Command string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Process) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Process) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// KernelFunctionCallEvent describes an event that occurred related to kernel
// functions being entered or exited.
type KernelFunctionCallEvent struct {
	// Label repeated w/ a `mapEntry` option set to `true`.
	// This is a map of argument names and values. The keys are strings
	// that are the names of the arguments, and the values are the actual
	// values for each field.
	Arguments map[string]*KernelFunctionCallEvent_FieldValue `protobuf:"bytes,1,rep,name=arguments" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KernelFunctionCallEvent) Reset()                    { *m = KernelFunctionCallEvent{} }
func (m *KernelFunctionCallEvent) String() string            { return proto.CompactTextString(m) }
func (*KernelFunctionCallEvent) ProtoMessage()               {}
func (*KernelFunctionCallEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *KernelFunctionCallEvent) GetArguments() map[string]*KernelFunctionCallEvent_FieldValue {
	if m != nil {
		return m.Arguments
	}
	return nil
}

// The representation of a field value, which is composed of type
// information and the value itself.
type KernelFunctionCallEvent_FieldValue struct {
	// The type represented by this field value.
	FieldType KernelFunctionCallEvent_FieldType `protobuf:"varint,1,opt,name=field_type,json=fieldType,enum=capsule8.api.v0.KernelFunctionCallEvent_FieldType" json:"field_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*KernelFunctionCallEvent_FieldValue_BytesValue
	//	*KernelFunctionCallEvent_FieldValue_StringValue
	//	*KernelFunctionCallEvent_FieldValue_SignedValue
	//	*KernelFunctionCallEvent_FieldValue_UnsignedValue
	Value isKernelFunctionCallEvent_FieldValue_Value `protobuf_oneof:"value"`
}

func (m *KernelFunctionCallEvent_FieldValue) Reset()         { *m = KernelFunctionCallEvent_FieldValue{} }
func (m *KernelFunctionCallEvent_FieldValue) String() string { return proto.CompactTextString(m) }
func (*KernelFunctionCallEvent_FieldValue) ProtoMessage()    {}
func (*KernelFunctionCallEvent_FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{8, 0}
}

type isKernelFunctionCallEvent_FieldValue_Value interface {
	isKernelFunctionCallEvent_FieldValue_Value()
}

type KernelFunctionCallEvent_FieldValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,2,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type KernelFunctionCallEvent_FieldValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}
type KernelFunctionCallEvent_FieldValue_SignedValue struct {
	SignedValue int64 `protobuf:"zigzag64,4,opt,name=signed_value,json=signedValue,oneof"`
}
type KernelFunctionCallEvent_FieldValue_UnsignedValue struct {
	UnsignedValue uint64 `protobuf:"varint,5,opt,name=unsigned_value,json=unsignedValue,oneof"`
}

func (*KernelFunctionCallEvent_FieldValue_BytesValue) isKernelFunctionCallEvent_FieldValue_Value()  {}
func (*KernelFunctionCallEvent_FieldValue_StringValue) isKernelFunctionCallEvent_FieldValue_Value() {}
func (*KernelFunctionCallEvent_FieldValue_SignedValue) isKernelFunctionCallEvent_FieldValue_Value() {}
func (*KernelFunctionCallEvent_FieldValue_UnsignedValue) isKernelFunctionCallEvent_FieldValue_Value() {
}

func (m *KernelFunctionCallEvent_FieldValue) GetValue() isKernelFunctionCallEvent_FieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KernelFunctionCallEvent_FieldValue) GetFieldType() KernelFunctionCallEvent_FieldType {
	if m != nil {
		return m.FieldType
	}
	return KernelFunctionCallEvent_UNKNOWN
}

func (m *KernelFunctionCallEvent_FieldValue) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *KernelFunctionCallEvent_FieldValue) GetStringValue() string {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *KernelFunctionCallEvent_FieldValue) GetSignedValue() int64 {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_SignedValue); ok {
		return x.SignedValue
	}
	return 0
}

func (m *KernelFunctionCallEvent_FieldValue) GetUnsignedValue() uint64 {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_UnsignedValue); ok {
		return x.UnsignedValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KernelFunctionCallEvent_FieldValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KernelFunctionCallEvent_FieldValue_OneofMarshaler, _KernelFunctionCallEvent_FieldValue_OneofUnmarshaler, _KernelFunctionCallEvent_FieldValue_OneofSizer, []interface{}{
		(*KernelFunctionCallEvent_FieldValue_BytesValue)(nil),
		(*KernelFunctionCallEvent_FieldValue_StringValue)(nil),
		(*KernelFunctionCallEvent_FieldValue_SignedValue)(nil),
		(*KernelFunctionCallEvent_FieldValue_UnsignedValue)(nil),
	}
}

func _KernelFunctionCallEvent_FieldValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KernelFunctionCallEvent_FieldValue)
	// value
	switch x := m.Value.(type) {
	case *KernelFunctionCallEvent_FieldValue_BytesValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case *KernelFunctionCallEvent_FieldValue_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *KernelFunctionCallEvent_FieldValue_SignedValue:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeZigzag64(uint64(x.SignedValue))
	case *KernelFunctionCallEvent_FieldValue_UnsignedValue:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UnsignedValue))
	case nil:
	default:
		return fmt.Errorf("KernelFunctionCallEvent_FieldValue.Value has unexpected type %T", x)
	}
	return nil
}

func _KernelFunctionCallEvent_FieldValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KernelFunctionCallEvent_FieldValue)
	switch tag {
	case 2: // value.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &KernelFunctionCallEvent_FieldValue_BytesValue{x}
		return true, err
	case 3: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &KernelFunctionCallEvent_FieldValue_StringValue{x}
		return true, err
	case 4: // value.signed_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.Value = &KernelFunctionCallEvent_FieldValue_SignedValue{int64(x)}
		return true, err
	case 5: // value.unsigned_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &KernelFunctionCallEvent_FieldValue_UnsignedValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _KernelFunctionCallEvent_FieldValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KernelFunctionCallEvent_FieldValue)
	// value
	switch x := m.Value.(type) {
	case *KernelFunctionCallEvent_FieldValue_BytesValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *KernelFunctionCallEvent_FieldValue_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *KernelFunctionCallEvent_FieldValue_SignedValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(x.SignedValue<<1) ^ uint64((int64(x.SignedValue) >> 63))))
	case *KernelFunctionCallEvent_FieldValue_UnsignedValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UnsignedValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// NetworkEvent describes an event that occurred related to network activity
// occurring as detected by the Sensor.
type NetworkEvent struct {
	// The type of event described by this NetworkEvent message.
	Type NetworkEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.NetworkEventType" json:"type,omitempty"`
	// Present when the event describes a network event that is an attempt
	// to perform a network related action. This is the socket descriptor
	// used to perform the action.
	Sockfd uint64 `protobuf:"varint,10,opt,name=sockfd" json:"sockfd,omitempty"`
	// Present when the event describes a network event that is an attempt
	// to perform a network related action that includes an address. This
	// is that address.
	Address *NetworkAddress `protobuf:"bytes,11,opt,name=address" json:"address,omitempty"`
	// Present when the event describes a network event that is the result
	// of an attempted network related action. This is the return code from
	// the system call.
	Result int64 `protobuf:"zigzag64,12,opt,name=result" json:"result,omitempty"`
	// Present only when the event describes a listen attempt. This is the
	// value of the backlog argument passed to listen(2).
	Backlog uint64 `protobuf:"varint,13,opt,name=backlog" json:"backlog,omitempty"`
}

func (m *NetworkEvent) Reset()                    { *m = NetworkEvent{} }
func (m *NetworkEvent) String() string            { return proto.CompactTextString(m) }
func (*NetworkEvent) ProtoMessage()               {}
func (*NetworkEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *NetworkEvent) GetType() NetworkEventType {
	if m != nil {
		return m.Type
	}
	return NetworkEventType_NETWORK_EVENT_TYPE_UNKNOWN
}

func (m *NetworkEvent) GetSockfd() uint64 {
	if m != nil {
		return m.Sockfd
	}
	return 0
}

func (m *NetworkEvent) GetAddress() *NetworkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NetworkEvent) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *NetworkEvent) GetBacklog() uint64 {
	if m != nil {
		return m.Backlog
	}
	return 0
}

func init() {
	proto.RegisterType((*TelemetryEvent)(nil), "capsule8.api.v0.TelemetryEvent")
	proto.RegisterType((*ChargenEvent)(nil), "capsule8.api.v0.ChargenEvent")
	proto.RegisterType((*TickerEvent)(nil), "capsule8.api.v0.TickerEvent")
	proto.RegisterType((*ContainerEvent)(nil), "capsule8.api.v0.ContainerEvent")
	proto.RegisterType((*ProcessEvent)(nil), "capsule8.api.v0.ProcessEvent")
	proto.RegisterType((*SyscallEvent)(nil), "capsule8.api.v0.SyscallEvent")
	proto.RegisterType((*FileEvent)(nil), "capsule8.api.v0.FileEvent")
	proto.RegisterType((*Process)(nil), "capsule8.api.v0.Process")
	proto.RegisterType((*KernelFunctionCallEvent)(nil), "capsule8.api.v0.KernelFunctionCallEvent")
	proto.RegisterType((*KernelFunctionCallEvent_FieldValue)(nil), "capsule8.api.v0.KernelFunctionCallEvent.FieldValue")
	proto.RegisterType((*NetworkEvent)(nil), "capsule8.api.v0.NetworkEvent")
	proto.RegisterEnum("capsule8.api.v0.ContainerEventType", ContainerEventType_name, ContainerEventType_value)
	proto.RegisterEnum("capsule8.api.v0.ProcessEventType", ProcessEventType_name, ProcessEventType_value)
	proto.RegisterEnum("capsule8.api.v0.SyscallEventType", SyscallEventType_name, SyscallEventType_value)
	proto.RegisterEnum("capsule8.api.v0.FileEventType", FileEventType_name, FileEventType_value)
	proto.RegisterEnum("capsule8.api.v0.KernelFunctionCallEventType", KernelFunctionCallEventType_name, KernelFunctionCallEventType_value)
	proto.RegisterEnum("capsule8.api.v0.NetworkEventType", NetworkEventType_name, NetworkEventType_value)
	proto.RegisterEnum("capsule8.api.v0.KernelFunctionCallEvent_FieldType", KernelFunctionCallEvent_FieldType_name, KernelFunctionCallEvent_FieldType_value)
}

func init() { proto.RegisterFile("capsule8/api/v0/telemetry_event.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x31, 0x77, 0xdb, 0xc8,
	0x11, 0x36, 0x48, 0x4a, 0x24, 0x87, 0x14, 0x05, 0x6d, 0x74, 0x77, 0x38, 0xc9, 0x27, 0x51, 0x94,
	0x7d, 0x66, 0x94, 0x3c, 0xd9, 0xa6, 0x64, 0x9f, 0x93, 0x26, 0x4f, 0x86, 0xc0, 0x18, 0x91, 0x0c,
	0x2a, 0x4b, 0xc8, 0x77, 0xae, 0xf0, 0x60, 0x60, 0x45, 0x23, 0x22, 0x01, 0x1e, 0x00, 0x3a, 0x56,
	0x9b, 0x2e, 0x45, 0x8a, 0x54, 0x29, 0xf3, 0x0f, 0xf2, 0x17, 0x52, 0x27, 0x7f, 0x22, 0x75, 0xfa,
	0xd4, 0x79, 0x79, 0x3b, 0xbb, 0x20, 0x29, 0x89, 0xb0, 0x2e, 0xdd, 0x75, 0xbb, 0xdf, 0xf7, 0xcd,
	0xec, 0xec, 0x0c, 0x67, 0x16, 0x8f, 0xf0, 0xd0, 0x73, 0xc7, 0xc9, 0x64, 0xc8, 0x5e, 0x3c, 0x76,
	0xc7, 0xc1, 0xe3, 0x0f, 0x4f, 0x1e, 0xa7, 0x6c, 0xc8, 0x46, 0x2c, 0x8d, 0xaf, 0x1c, 0xf6, 0x81,
	0x85, 0xe9, 0xfe, 0x38, 0x8e, 0xd2, 0x88, 0xac, 0x66, 0xb2, 0x7d, 0x77, 0x1c, 0xec, 0x7f, 0x78,
	0xb2, 0xb1, 0x79, 0xcb, 0xee, 0x6a, 0xcc, 0x12, 0xa1, 0x6e, 0xfd, 0xad, 0x0c, 0x0d, 0x3b, 0xf3,
	0x63, 0x70, 0x37, 0xa4, 0x01, 0x85, 0xc0, 0xd7, 0x94, 0xa6, 0xd2, 0xae, 0xd2, 0x42, 0xe0, 0x93,
	0xaf, 0x00, 0xc6, 0x71, 0xe4, 0xb1, 0x24, 0x71, 0x02, 0x5f, 0x2b, 0x20, 0x5e, 0x95, 0x88, 0xe9,
	0x93, 0x6d, 0xa8, 0x65, 0xf4, 0x38, 0xf0, 0xb5, 0x62, 0x53, 0x69, 0x2f, 0xd1, 0xcc, 0xe2, 0x2c,
	0xf0, 0xc9, 0x0e, 0xd4, 0xbd, 0x28, 0x4c, 0xdd, 0x20, 0x64, 0x31, 0xf7, 0x50, 0x42, 0x0f, 0xb5,
	0x29, 0x66, 0xfa, 0x64, 0x13, 0xaa, 0x09, 0x0b, 0x93, 0x08, 0xf9, 0x25, 0xe4, 0x2b, 0x02, 0x30,
	0x7d, 0x72, 0x08, 0x9f, 0x4b, 0x32, 0x61, 0xdf, 0x4f, 0x58, 0xe8, 0x31, 0x27, 0x9c, 0x8c, 0xde,
	0xb1, 0x58, 0x5b, 0x6e, 0x2a, 0xed, 0x12, 0x5d, 0x17, 0x6c, 0x5f, 0x92, 0x16, 0x72, 0xa4, 0x03,
	0x9f, 0x49, 0xab, 0x51, 0x14, 0x46, 0x69, 0x30, 0x62, 0x4e, 0xe8, 0x86, 0x51, 0xa2, 0x95, 0x9b,
	0x4a, 0xbb, 0x48, 0x7f, 0x22, 0xc8, 0xd7, 0x92, 0xb3, 0x38, 0x45, 0x8e, 0x60, 0x35, 0xbb, 0xca,
	0x30, 0x08, 0x99, 0x3b, 0x60, 0x5a, 0xa5, 0x59, 0x6c, 0xd7, 0x3a, 0xda, 0xfe, 0x8d, 0xa4, 0xee,
	0x9f, 0x09, 0x1d, 0x6d, 0x48, 0x83, 0x53, 0xa1, 0x27, 0x0f, 0xa1, 0x31, 0xbb, 0x6c, 0xe8, 0x8e,
	0x98, 0xb6, 0x85, 0xd7, 0x59, 0x99, 0xa2, 0x96, 0x3b, 0x62, 0xe4, 0x4b, 0xa8, 0x04, 0x23, 0x77,
	0xc0, 0xf8, 0x7d, 0xb7, 0x51, 0x50, 0xc6, 0xbd, 0x89, 0xe9, 0x16, 0x14, 0x5a, 0x37, 0x45, 0xba,
	0x11, 0x41, 0xcb, 0x5f, 0x40, 0x39, 0xb9, 0x4a, 0x3c, 0x77, 0x38, 0xd4, 0xa0, 0xa9, 0xb4, 0x6b,
	0x9d, 0xaf, 0x6e, 0xc5, 0xd6, 0x17, 0x3c, 0x56, 0xf3, 0xd5, 0x3d, 0x9a, 0xe9, 0xb9, 0xa9, 0x8c,
	0x56, 0xab, 0xe5, 0x98, 0xca, 0x6b, 0x4d, 0x4d, 0xa5, 0x9e, 0x3c, 0x81, 0xd2, 0x45, 0x30, 0x64,
	0x5a, 0x1d, 0xed, 0x36, 0x6e, 0xd9, 0x75, 0x83, 0x21, 0xcb, 0x8c, 0x50, 0x49, 0x4e, 0xa0, 0x76,
	0xc9, 0xe2, 0x90, 0x0d, 0x1d, 0x8c, 0x75, 0x05, 0x0d, 0xdb, 0xb7, 0x0c, 0x4f, 0x50, 0xd3, 0x9d,
	0x84, 0x5e, 0x1a, 0x44, 0xa1, 0x3e, 0x17, 0x36, 0x08, 0x73, 0x5d, 0x46, 0x1e, 0xb2, 0xf4, 0xf7,
	0x51, 0x7c, 0xa9, 0x35, 0x72, 0x22, 0xb7, 0x04, 0x3f, 0x8d, 0x5c, 0xea, 0xc9, 0xaf, 0xa0, 0x3a,
	0x4d, 0xbd, 0xb6, 0x8e, 0xc6, 0xdb, 0xb7, 0x8c, 0xf5, 0x4c, 0x91, 0x99, 0xcf, 0x6c, 0xf8, 0xd9,
	0xde, 0x7b, 0x37, 0x1e, 0xb0, 0x50, 0xf3, 0x73, 0xce, 0xd6, 0x05, 0x3f, 0x3d, 0x5b, 0xea, 0xc9,
	0x73, 0x58, 0x4e, 0x03, 0xef, 0x92, 0xc5, 0x1a, 0x43, 0xcb, 0xfb, 0xb7, 0x2c, 0x6d, 0xa4, 0x33,
	0x43, 0xa9, 0x26, 0x6b, 0x50, 0xf4, 0xc6, 0x13, 0xed, 0x1f, 0x0a, 0xf6, 0x12, 0x5f, 0xbf, 0x2c,
	0xc3, 0x12, 0x36, 0x79, 0xeb, 0x18, 0xea, 0xf3, 0xc7, 0x91, 0x75, 0x58, 0x0a, 0x42, 0x9f, 0x7d,
	0xc4, 0x86, 0x2d, 0x51, 0xb1, 0x21, 0x5b, 0x00, 0x3c, 0x08, 0xd7, 0x4b, 0x59, 0x9c, 0xc8, 0x9e,
	0x9d, 0x43, 0x5a, 0x26, 0xd4, 0xe6, 0x8e, 0x26, 0x1a, 0x94, 0x13, 0xe6, 0x45, 0xa1, 0x9f, 0xa0,
	0x9b, 0x22, 0xcd, 0xb6, 0xa4, 0x09, 0x35, 0x6c, 0x1b, 0xc9, 0x16, 0x90, 0x9d, 0x87, 0x5a, 0x7f,
	0x2e, 0x42, 0xe3, 0x7a, 0xfe, 0xc8, 0x37, 0x50, 0xe2, 0x33, 0x06, 0x7d, 0x35, 0x3a, 0xbb, 0x77,
	0xa4, 0xdb, 0xbe, 0x1a, 0x33, 0x8a, 0x06, 0x84, 0x40, 0x09, 0x7f, 0xf5, 0x22, 0x60, 0x5c, 0x5f,
	0x6b, 0x15, 0xf8, 0x54, 0xab, 0xd4, 0x6e, 0xb6, 0xca, 0x97, 0x50, 0x79, 0x1f, 0x25, 0x29, 0x8e,
	0x25, 0x5e, 0xf9, 0x35, 0x5a, 0xe6, 0x7b, 0x3e, 0x93, 0x36, 0xa1, 0xca, 0x3e, 0x06, 0xa9, 0xe3,
	0x45, 0xbe, 0xe8, 0xd0, 0x35, 0x5a, 0xe1, 0x80, 0x1e, 0xf9, 0x8c, 0x4f, 0x34, 0x24, 0x93, 0xd4,
	0x4d, 0x27, 0x09, 0xf6, 0xe7, 0x0a, 0x05, 0x0e, 0xf5, 0x11, 0x99, 0x09, 0x82, 0x41, 0xe8, 0x0e,
	0xb1, 0x47, 0x33, 0x01, 0x22, 0xa4, 0x0d, 0xaa, 0x74, 0x1f, 0x33, 0xc7, 0x9f, 0x8c, 0xc6, 0xcc,
	0xd7, 0x76, 0x9a, 0x4a, 0xbb, 0x42, 0x1b, 0xe2, 0x94, 0x98, 0x1d, 0x23, 0x4a, 0x7e, 0x0e, 0xc4,
	0x8f, 0x78, 0x21, 0x1c, 0x2f, 0x0a, 0x2f, 0x82, 0x81, 0xf3, 0xbb, 0x24, 0x12, 0x3f, 0xb4, 0x2a,
	0x55, 0x05, 0xa3, 0x23, 0xf1, 0x9b, 0x24, 0x0a, 0xc9, 0xd7, 0xb0, 0x1a, 0x79, 0xc1, 0x35, 0x29,
	0x13, 0xe3, 0x25, 0xf2, 0x82, 0x99, 0xae, 0xf5, 0xef, 0x02, 0xd4, 0xe7, 0x5b, 0x99, 0x3c, 0xbb,
	0x56, 0x91, 0x9d, 0x4f, 0xf6, 0xfd, 0x5c, 0x3d, 0x1e, 0x40, 0xe3, 0x22, 0x8a, 0x2f, 0x1d, 0xef,
	0x7d, 0x30, 0xf4, 0x31, 0x8f, 0x80, 0xb9, 0xaa, 0x73, 0x54, 0xe7, 0x20, 0x4f, 0x66, 0x0b, 0x56,
	0xe6, 0x54, 0x81, 0x2f, 0x2b, 0x51, 0x9b, 0x8a, 0x4c, 0x9f, 0xec, 0xc2, 0x0a, 0xfb, 0xc8, 0x3c,
	0x87, 0xcf, 0x06, 0xac, 0xd6, 0x3a, 0x6a, 0xea, 0x1c, 0xec, 0x4a, 0x8c, 0xec, 0xc1, 0x1a, 0x8a,
	0xbc, 0x68, 0x34, 0x72, 0x43, 0x1f, 0x87, 0xb0, 0xf6, 0x59, 0xb3, 0xd8, 0xae, 0xd2, 0x55, 0x4e,
	0xe8, 0x02, 0xe7, 0xb3, 0xf6, 0x47, 0x53, 0xc1, 0xd6, 0xbf, 0x14, 0xa8, 0xcf, 0x4f, 0xdc, 0x3b,
	0x73, 0x3d, 0x2f, 0x9e, 0xcb, 0xb5, 0x78, 0x76, 0x45, 0x83, 0xf1, 0x67, 0x97, 0x40, 0xc9, 0x8d,
	0x07, 0x4f, 0x30, 0xe3, 0x25, 0x8a, 0x6b, 0x89, 0x3d, 0xc5, 0x04, 0x0b, 0xec, 0xa9, 0xc4, 0x3a,
	0x38, 0x9a, 0x05, 0xd6, 0x91, 0xd8, 0x01, 0x4e, 0x5d, 0x81, 0x1d, 0x48, 0xec, 0x10, 0x07, 0xa8,
	0xc0, 0x0e, 0x25, 0xf6, 0x4c, 0x5b, 0x9d, 0x62, 0xcf, 0x88, 0x0a, 0xc5, 0x98, 0xa5, 0x58, 0x9f,
	0x22, 0xe5, 0xcb, 0xd6, 0x5f, 0x14, 0xa8, 0x4e, 0x07, 0x3c, 0xe9, 0x5c, 0xbb, 0xde, 0x56, 0xfe,
	0x53, 0x30, 0x77, 0xb7, 0x0d, 0xa8, 0x4c, 0x0b, 0x2f, 0x7a, 0x78, 0xba, 0xe7, 0x4d, 0x1c, 0x8d,
	0x59, 0xe8, 0x5c, 0x0c, 0xdd, 0x81, 0x78, 0x98, 0xd6, 0x68, 0x95, 0x23, 0x5d, 0x0e, 0xf0, 0x3a,
	0x23, 0x3d, 0xe2, 0x75, 0xae, 0x8b, 0x3a, 0x73, 0xe0, 0x75, 0xe4, 0xb3, 0xd6, 0x33, 0x28, 0xcb,
	0x5f, 0x2e, 0x0f, 0x7b, 0x2c, 0x3f, 0x5b, 0xd6, 0x28, 0x5f, 0xf2, 0xa1, 0x26, 0x7f, 0x48, 0x72,
	0x9e, 0x64, 0xdb, 0xd6, 0x7f, 0x4a, 0xf0, 0x45, 0xce, 0xc3, 0x43, 0xce, 0xa1, 0xea, 0xc6, 0x83,
	0xc9, 0x88, 0x85, 0x29, 0x1f, 0x86, 0xfc, 0xf5, 0xff, 0xe6, 0x87, 0xbe, 0x5a, 0xfb, 0x47, 0x99,
	0xa5, 0x11, 0xa6, 0xf1, 0x15, 0x9d, 0x79, 0xda, 0xf8, 0xaf, 0x02, 0xd0, 0x0d, 0xd8, 0xd0, 0x7f,
	0xe3, 0x0e, 0x27, 0x8c, 0xfc, 0x16, 0xe0, 0x82, 0xef, 0x9c, 0xb9, 0x54, 0x76, 0x7e, 0xf0, 0x31,
	0xe8, 0x08, 0xd3, 0x5b, 0xbd, 0xc8, 0x96, 0x64, 0x07, 0x6a, 0xef, 0xae, 0x52, 0x96, 0x38, 0x1f,
	0xf8, 0x09, 0x78, 0xe5, 0x3a, 0x7f, 0x46, 0x11, 0x14, 0xa7, 0xee, 0x42, 0x3d, 0x49, 0xe3, 0x20,
	0x1c, 0x48, 0x0d, 0xff, 0x56, 0xab, 0xbe, 0xba, 0x47, 0x6b, 0x02, 0x9d, 0x89, 0x82, 0x41, 0xc8,
	0x7c, 0x29, 0xe2, 0x9f, 0x6b, 0x04, 0x45, 0x88, 0x0a, 0xd1, 0x23, 0x68, 0x4c, 0xc2, 0x6b, 0x32,
	0xfe, 0xd5, 0x56, 0x7a, 0x75, 0x8f, 0xae, 0x64, 0x38, 0x0a, 0xf9, 0xbb, 0x85, 0xfc, 0xc6, 0xf7,
	0xd0, 0xb8, 0x9e, 0x1d, 0x5e, 0xb1, 0x4b, 0x76, 0x25, 0x3f, 0x34, 0xf9, 0x92, 0x98, 0x52, 0x8c,
	0xc1, 0xd7, 0x3a, 0x07, 0xff, 0x5f, 0x42, 0xf0, 0x40, 0x2a, 0x3c, 0xfc, 0xb2, 0xf0, 0x42, 0x69,
	0xfd, 0x09, 0x7f, 0xb7, 0x59, 0x7e, 0x6a, 0x50, 0x3e, 0xb7, 0x4e, 0xac, 0xde, 0xb7, 0x96, 0x7a,
	0x8f, 0x54, 0x61, 0xe9, 0xe5, 0x5b, 0xdb, 0xe8, 0xab, 0x0a, 0x01, 0x58, 0xee, 0xdb, 0xd4, 0xb4,
	0x7e, 0xad, 0x16, 0x38, 0xdc, 0x37, 0x2d, 0xfb, 0x85, 0x5a, 0x44, 0xd8, 0xb4, 0xec, 0xa7, 0xcf,
	0xd5, 0x52, 0xb6, 0x3e, 0xe8, 0xa8, 0x4b, 0xd9, 0xfa, 0xf9, 0xa1, 0xba, 0xcc, 0xe5, 0xe7, 0x28,
	0x2f, 0x73, 0xf8, 0x5c, 0xc8, 0x2b, 0xd9, 0xfa, 0xa0, 0xa3, 0x56, 0xb3, 0xf5, 0xf3, 0x43, 0x15,
	0x5a, 0xff, 0x54, 0xa0, 0x3e, 0xff, 0x99, 0x72, 0xe7, 0xa4, 0x98, 0x17, 0xcf, 0x75, 0xd3, 0xe7,
	0xb0, 0x9c, 0x44, 0xde, 0xe5, 0x85, 0x2f, 0x67, 0x83, 0xdc, 0xf1, 0x2f, 0x15, 0xd7, 0xf7, 0xe3,
	0xd9, 0xf7, 0xdd, 0x76, 0x9e, 0xc7, 0x23, 0x21, 0xa3, 0x99, 0x9e, 0xbb, 0x8c, 0x59, 0x32, 0x19,
	0xa6, 0xd8, 0x62, 0x84, 0xca, 0x1d, 0xef, 0xa1, 0x77, 0xae, 0x77, 0x39, 0x8c, 0x06, 0x72, 0x96,
	0x64, 0xdb, 0xbd, 0xbf, 0x2b, 0x40, 0x6e, 0xbf, 0xe3, 0xa4, 0x09, 0xf7, 0xf5, 0x9e, 0x65, 0x1f,
	0x99, 0x96, 0x41, 0x1d, 0xe3, 0x8d, 0x61, 0xd9, 0x8e, 0xfd, 0xf6, 0xcc, 0x70, 0x66, 0xa9, 0xcf,
	0x53, 0xe8, 0xd4, 0x38, 0xb2, 0x8d, 0x63, 0x55, 0xc9, 0x55, 0xd0, 0x73, 0xcb, 0x12, 0x75, 0xda,
	0x86, 0xcd, 0x85, 0x0a, 0xe3, 0x3b, 0x93, 0xbb, 0x28, 0x92, 0x16, 0x6c, 0x2d, 0x14, 0x1c, 0x1b,
	0x7d, 0x9b, 0xf6, 0xde, 0x1a, 0xc7, 0x6a, 0x69, 0xef, 0x8f, 0x0a, 0xa8, 0x37, 0xdf, 0x3d, 0xb2,
	0x05, 0x1b, 0x67, 0xb4, 0xa7, 0x1b, 0xfd, 0xfe, 0xe2, 0xe8, 0x37, 0xe1, 0x8b, 0x05, 0x7c, 0xb7,
	0x47, 0x4f, 0x54, 0x25, 0x87, 0x34, 0xbe, 0x33, 0x74, 0xb5, 0x90, 0x4b, 0x9a, 0xb6, 0x5a, 0xdc,
	0x1b, 0x81, 0x7a, 0xf3, 0x59, 0xe0, 0xa1, 0xf4, 0xdf, 0xf6, 0xf5, 0xa3, 0xd3, 0xd3, 0xc5, 0xa1,
	0xdc, 0x07, 0x6d, 0x01, 0x6f, 0x58, 0xb6, 0x41, 0x45, 0x2c, 0x8b, 0x58, 0x7e, 0x5c, 0x61, 0xaf,
	0x0b, 0x2b, 0xd7, 0xc6, 0x34, 0x57, 0x77, 0xcd, 0x53, 0x63, 0xf1, 0x41, 0x1a, 0xac, 0xdf, 0x24,
	0x7b, 0x67, 0x86, 0xa5, 0x2a, 0x7b, 0x7f, 0x55, 0x60, 0x33, 0xa7, 0x27, 0xd1, 0xed, 0xcf, 0xe0,
	0xd1, 0x89, 0x41, 0x2d, 0xe3, 0xd4, 0xe9, 0x9e, 0x5b, 0xba, 0x6d, 0xf6, 0x2c, 0x27, 0xff, 0x3e,
	0x3f, 0x85, 0x87, 0x77, 0x89, 0xb3, 0xcb, 0xb5, 0xe1, 0xc1, 0x9d, 0x52, 0x71, 0xd3, 0x3f, 0x94,
	0x40, 0xbd, 0xd9, 0x46, 0x3c, 0xb3, 0x96, 0x61, 0x7f, 0xdb, 0xa3, 0x27, 0x8b, 0x23, 0xf9, 0x1a,
	0x5a, 0x0b, 0x78, 0xbd, 0x67, 0x59, 0x86, 0x6e, 0x3b, 0x47, 0xb6, 0x6d, 0xbc, 0x3e, 0xb3, 0x55,
	0x85, 0x3c, 0x84, 0x9d, 0x4f, 0xe8, 0xa8, 0xd1, 0x3f, 0x3f, 0xb5, 0xd5, 0x02, 0xd9, 0x85, 0xed,
	0x05, 0xb2, 0x97, 0xa6, 0x75, 0x3c, 0xf5, 0x85, 0xbf, 0xd8, 0x3c, 0x91, 0x74, 0x54, 0xca, 0x39,
	0xef, 0xd4, 0xec, 0xdb, 0x86, 0x35, 0x75, 0xb5, 0x44, 0x1e, 0x40, 0x33, 0x5f, 0x26, 0x9d, 0x2d,
	0xe7, 0x38, 0x3b, 0xd2, 0x75, 0xe3, 0x6c, 0x76, 0xc7, 0x72, 0x8e, 0x33, 0x29, 0x93, 0xce, 0x2a,
	0x39, 0xce, 0xfa, 0x86, 0x75, 0x6c, 0xf7, 0xa6, 0xce, 0xaa, 0x39, 0xce, 0xa4, 0x4c, 0x3a, 0x03,
	0xf2, 0x08, 0x76, 0x17, 0xa8, 0xa8, 0xa1, 0xbf, 0xe9, 0xd2, 0xde, 0xeb, 0xa9, 0xbb, 0x5a, 0x4e,
	0x9d, 0xa6, 0x42, 0xe9, 0xb0, 0xfe, 0x6e, 0x19, 0xff, 0xeb, 0x38, 0xf8, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x89, 0x77, 0x94, 0x60, 0x42, 0x11, 0x00, 0x00,
}
